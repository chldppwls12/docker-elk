input {
	# beats {
	# 	port => 5044
	# }

	# tcp {
	# 	port => 50000
	# }

	# 일단 파일로 테스트 예정
	file {
        path => "/var/log/myProject/receiver_service*"
        type => "myproject-receiver-logs"
        start_position => "beginning"
    }
    
    file {
        path => "/var/log/myProject/parsing_service*"
        type => "myproject-parsing-logs"
        start_position => "beginning"
    }
    
    file {
        path => "/var/log/myProject/uploader_service*"
        type => "myproject-uploader-logs"
        start_position => "beginning"
    }
}

filter {
  if [type] =~ /^myproject/ {
    # 기본 로그 파싱
    grok {
      match => { 
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level}  -%{GREEDYDATA:log_message}"
      }
    }
    
    # 서비스별 분류
    if [path] =~ /receiver/ {
      mutate { add_field => { "service" => "receiver" } }
    } else if [path] =~ /parsing/ {
      mutate { add_field => { "service" => "parsing" } }
    } else if [path] =~ /uploader/ {
      mutate { add_field => { "service" => "uploader" } }
    }

    # Receiver 특정 이벤트 패턴 매칭
    # 파일 수신 시작
    if [log_message] =~ /START.*\.csv|START.*\.zip/ {
      grok {
        match => { 
          "log_message" => "%{WORD:thread_name} START %{GREEDYDATA:file_path}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "file_processing_start" }
      }
    }
    
    # 파일 처리 완료
    if [log_message] =~ /End Time/ {
      grok {
        match => { 
          "log_message" => "%{WORD:thread_name} End Time : %{NUMBER:processing_time1} : %{NUMBER:processing_time2}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "file_processing_end" }
        convert => { "processing_time1" => "integer" }
        convert => { "processing_time2" => "integer" }
      }
    }
    
    # 파일 리스트 가져오기
    if [log_message] =~ /before get filelist|end get filelist/ {
      grok {
        match => { 
          "log_message" => "(?<action>before get filelist|end get filelist) %{PATH:receive_path}(?: : %{NUMBER:file_count})?" 
        }
      }
      mutate { 
        add_field => { "event_type" => "file_list_processing" }
        convert => { "file_count" => "integer" }
      }
    }
    
    # ZIP 압축 해제
    if [log_message] =~ /START.*extractSeq/ {
      grok {
        match => { 
          "log_message" => "START %{NUMBER:extract_seq}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "zip_extraction_start" }
        convert => { "extract_seq" => "integer" }
      }
    }
    
    if [log_message] =~ /End.*extractSeq/ {
      grok {
        match => { 
          "log_message" => "End %{NUMBER:extract_seq}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "zip_extraction_end" }
        convert => { "extract_seq" => "integer" }
      }
    }
    
    if [log_message] =~ /END.*parsingSeq/ {
      grok {
        match => { 
          "log_message" => "END %{NUMBER:parsing_seq}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "parsing_end" }
        convert => { "parsing_seq" => "integer" }
      }
    }
    
    if [log_message] =~ /Upload successful/ {
      grok {
        match => { 
          "log_message" => "Upload successful: %{PATH:file_path}" 
        }
      }
      mutate { add_field => { "event_type" => "upload_success" } }
    }
    
    if [log_message] =~ /Upload failed/ {
      grok {
        match => { 
          "log_message" => "Upload failed: %{PATH:file_path}" 
        }
      }
      mutate { add_field => { "event_type" => "upload_failed" } }
    }
    
    if [log_message] =~ /Retry cnt/ {
      grok {
        match => { 
          "log_message" => "Retry cnt : %{NUMBER:retry_count}, uploadSeq: %{NUMBER:upload_seq}" 
        }
      }
      mutate { 
        add_field => { "event_type" => "upload_retry" }
        convert => { "retry_count" => "integer" }
        convert => { "upload_seq" => "integer" }
      }
    }
    
    # 에러 로그 처리
    if [level] == "ERROR" or [level] == "FATAL" {
      mutate { add_field => { "event_type" => "error" } }
    }
  }
  
  # 공통 필터
	date {
		match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
		target => "@timestamp"
		timezone => "Asia/Seoul"
	}
}

output {
	if [type] =~ /^myproject/ {
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "elastic"
			password => "${LOGSTASH_INTERNAL_PASSWORD}"
			index => "myproject-logs-%{+YYYY.MM.dd}"
		}
	} else {
		elasticsearch {
			hosts => "elasticsearch:9200"
			user => "elastic"
			password => "${LOGSTASH_INTERNAL_PASSWORD}"
			password => "changeme"
			index => "logstash-%{+YYYY.MM.dd}"
		}

		stdout { codec => rubydebug }
	}
}
